
function after_equal(line) {
  return substr(line, 1 + index(line, "="))
}

function load_file(FN,  rs, fs, ladd, rn) {
  rs=RS; fs=FS
  RS=ARS
  FS="\n"
  delete ADD
  delete LADD
  while(( getline <FN) > 0 ) {
    rn = substr($1, 3)
    ADD[rn, "C"]  = after_equal($3)
    ADD[rn, "F"]  = after_equal($4)
    ADD[rn, "LF"] = after_equal($5)
    ladd=ladd rn SUBSEP
  }
  close(FN)
  # Split returns the number of elements found. As there's an extra SUBSEP, we
  # don't need to keep the last LADD element, so we delete it on the fly
  delete LADD[split(ladd, LADD, SUBSEP)]

  for(ladd in LADD)
  {
    rn = FN "." LADD[ladd]
    getline ADD[LADD[ladd], "L"] < rn
  }
  RS=rs; FS=fs
}

function get_record(rn,  line) {
  # gsub(/(^"|"$)/, "", ADD[rn, "L"])
  line=line sprintf("%s_C=%s\n",  rn, ADD[rn, "C"])
  line=line sprintf("%s_F=%s\n",  rn, ADD[rn, "F"])
  line=line sprintf("%s_LF=%s\n", rn, ADD[rn, "LF"])
  return line
}

function get_regex(rn) {
  return ADD[rn, "L"];
}

function print_all_record(  k) {
  for(k in LADD) {
    print get_regex(LADD[k])
    print get_record(LADD[k])
  }
}

function flush_to_file(FN,  k, a, line, e, fnRgx, cmd) {
  if(length(FN) == 0)
    FN = DAF

  cmd = "echo " FN
  cmd | getline FN
  close(cmd)

  for(k in LADD) {
    e = LADD[k]
    fnRgx = FN "." e
    line=""
    line=line sprintf("# %s\n", e)
    line=line sprintf("LIST+=\"%s \"\n", e)
    line=line get_record(e)
    line=line sprintf("%s\n", ARS)
    printf(line) >>FN
    print get_regex(e) >>fnRgx
    close(fnRgx)
  }
  close(FN)

  printf("Result written in '%s*'\n", FN)
}

BEGIN {
  load_file("additionnal");
  print_all_record()
  flush_to_file("test_flush2");
}